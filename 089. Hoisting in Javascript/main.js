var a = 100;

// newPrint(a);
print(10)

var newPrint = print;
newPrint(45);

function print(a) {
    console.log(a);
}

print(a);

// creation phase
// a = undefine
// newPrint = undefined;
// print = ref;

//execution phase

// a = 100;
// newPrint = ref;


/* 
জাভাস্ক্রিপ্টে **হোইস্টিং** হলো এমন একটি প্রক্রিয়া যেখানে ভেরিয়েবল এবং ফাংশন ডিক্লেয়ারেশনগুলো তাদের স্কোপের শীর্ষে নিয়ে যাওয়া হয়,
 অর্থাৎ কোডের শুরুতে। এটি জাভাস্ক্রিপ্ট ইঞ্জিনের ডিফল্ট আচরণ, যা কোডের কার্যকরীকরণকে প্রভাবিত করে।

আপনার প্রদত্ত কোডটি নিচে দেওয়া হলো:

```javascript
var a = 100;

newPrint(a);
print(10);

var newPrint = print;
newPrint(45);

function print(a) {
    console.log(a);
}

print(a);
```

**হোইস্টিং কিভাবে কাজ করে:**

1. **ক্রিয়েশন ফেজ (Creation Phase):**
   - এই পর্যায়ে, জাভাস্ক্রিপ্ট ইঞ্জিন কোড স্ক্যান করে এবং ভেরিয়েবল ও ফাংশন ডিক্লেয়ারেশনগুলোকে মেমরিতে স্থান দেয়।
   - `var` দিয়ে ডিক্লেয়ার করা ভেরিয়েবলগুলো `undefined` দিয়ে ইনিশিয়ালাইজ হয়।
   - ফাংশন ডিক্লেয়ারেশনগুলো সম্পূর্ণরূপে মেমরিতে লোড হয়, অর্থাৎ ফাংশনের বডি সহ।

   আপনার কোডের ক্ষেত্রে, ক্রিয়েশন ফেজে যা ঘটে:

   - `a` ভেরিয়েবলটি `undefined` দিয়ে ইনিশিয়ালাইজ হয়।
   - `newPrint` ভেরিয়েবলটিও `undefined` দিয়ে ইনিশিয়ালাইজ হয়।
   - `print` ফাংশনটি সম্পূর্ণরূপে মেমরিতে লোড হয়।

2. **এক্সিকিউশন ফেজ (Execution Phase):**
   - এই পর্যায়ে, কোড লাইন বাই লাইন কার্যকর হয় এবং ভেরিয়েবলগুলো তাদের আসল মান পায়।

   আপনার কোডের ক্ষেত্রে, এক্সিকিউশন ফেজে যা ঘটে:

   - `a` ভেরিয়েবলটি `100` মান পায়।
   - `newPrint` ভেরিয়েবলটি `print` ফাংশনের রেফারেন্স পায়।

**কোডের কার্যকরীকরণ বিশ্লেষণ:**

- `newPrint(a);` লাইনটি `newPrint` ভেরিয়েবলটি ইনিশিয়ালাইজ হওয়ার আগে কল করা হয়েছে। যেহেতু ক্রিয়েশন ফেজে `newPrint` এর মান `undefined`, তাই এটি ফাংশন নয়। ফলে, এই লাইনটি `TypeError: newPrint is not a function` ত্রুটি সৃষ্টি করবে।

- `print(10);` লাইনটি সঠিকভাবে কাজ করবে, কারণ `print` ফাংশনটি হোইস্টিংয়ের কারণে ক্রিয়েশন ফেজেই উপলব্ধ। এটি `10` কনসোল-এ লগ করবে।

- `var newPrint = print;` লাইনটি `newPrint` ভেরিয়েবলটিকে `print` ফাংশনের রেফারেন্স দিয়ে ইনিশিয়ালাইজ করে।

- `newPrint(45);` লাইনটি সঠিকভাবে কাজ করবে, কারণ এখন `newPrint` ফাংশনটি `print` এর রেফারেন্স ধারণ করছে। এটি `45` কনসোল-এ লগ করবে।

- `print(a);` লাইনটি সঠিকভাবে কাজ করবে এবং `100` কনসোল-এ লগ করবে।

**সমস্যা এবং সমাধান:**

কোডের প্রথম লাইনে `newPrint(a);` কলটি `newPrint` ভেরিয়েবলটি ইনিশিয়ালাইজ হওয়ার আগে করা হয়েছে, যা ত্রুটি সৃষ্টি করে। এই সমস্যাটি সমাধানের জন্য, `newPrint` ভেরিয়েবলটি ইনিশিয়ালাইজ করার পরে ফাংশন কলগুলি করা উচিত।

সংশোধিত কোড:

```javascript
var a = 100;

print(10);

var newPrint = print;
newPrint(a);
newPrint(45);

function print(a) {
    console.log(a);
}

print(a);
```

এখন, কোডটি সঠিকভাবে কাজ করবে এবং কনসোল-এ নিম্নলিখিত আউটপুট দেবে:

```
10
100
45
100
```

**হোইস্টিং সম্পর্কে আরও জানতে:**

হোইস্টিং সম্পর্কে আরও বিস্তারিত জানতে, আপনি [জাভাস্ক্রিপ্ট হয়েস্টিং নিয়ে যাবতীয় কনফিউশন](https://shikhun.hashnode.dev/javascript-hoisting) প্রবন্ধটি পড়তে পারেন।

এছাড়া, নিচের ভিডিওটি হোইস্টিং সম্পর্কে আরও বিস্তারিতভাবে ব্যাখ্যা করে:

 

*/