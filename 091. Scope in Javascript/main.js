/* 
জাভাস্ক্রিপ্টে **স্কোপ** বলতে বোঝায় সেই প্রেক্ষাপট বা পরিসর, যেখানে ভেরিয়েবল, ফাংশন এবং অবজেক্টগুলো অ্যাক্সেস করা যায়। এটি নির্ধারণ করে
 কোন ভেরিয়েবল বা ফাংশন কোডের কোন অংশে দৃশ্যমান এবং ব্যবহৃত হতে পারবে। স্কোপ বোঝা গুরুত্বপূর্ণ, কারণ এটি ভেরিয়েবলগুলোর অ্যাক্সেস নিয়ন্ত্রণ
  করে এবং আপনার প্রোগ্রামে অনাকাঙ্ক্ষিত সংঘর্ষ এড়াতে সহায়তা করে।

**জাভাস্ক্রিপ্টে স্কোপের প্রকারভেদ:**

1. **গ্লোবাল স্কোপ (Global Scope):**
   - যে ভেরিয়েবলগুলো কোনো ফাংশন বা ব্লকের বাইরে ডিক্লেয়ার করা হয়, সেগুলো গ্লোবাল স্কোপে থাকে। এগুলো কোডের যেকোনো স্থান থেকে অ্যাক্সেস
   করা যায়। তবে অতিরিক্ত গ্লোবাল ভেরিয়েবল ব্যবহার করলে সংঘর্ষ এবং অনাকাঙ্ক্ষিত আচরণ ঘটতে পারে।

2. **ফাংশন স্কোপ (Function Scope):**
   - `var` কীওয়ার্ড দিয়ে ফাংশনের ভিতরে ডিক্লেয়ার করা ভেরিয়েবলগুলো শুধুমাত্র সেই ফাংশনের মধ্যেই অ্যাক্সেস করা যায় এবং বাইরে থেকে অ্যাক্সেস করা
    যায় না। এটি ভেরিয়েবল নামের সংঘর্ষ প্রতিরোধে সহায়তা করে।

3. **ব্লক স্কোপ (Block Scope):**
   - ECMAScript 6 (ES6) এ `let` এবং `const` কীওয়ার্ডের মাধ্যমে ব্লক স্কোপ পরিচিত হয়। এগুলো ব্লকের (যেমন `{}`) মধ্যে ডিক্লেয়ার করা 
   ভেরিয়েবলগুলোকে সেই ব্লকের মধ্যেই সীমাবদ্ধ রাখে। এ মানে, ব্লকের বাইরে থেকে এই ভেরিয়েবলগুলো অ্যাক্সেস করা যায় না।

**স্কোপের উদাহরণ:**

```javascript
// গ্লোবাল স্কোপ
var globalVar = "আমি একটি গ্লোবাল ভেরিয়েবল";

function exampleFunction() {
    // ফাংশন স্কোপ
    var functionVar = "আমি একটি ফাংশন-স্কোপড ভেরিয়েবল";
    console.log(globalVar); // অ্যাক্সেসযোগ্য
    console.log(functionVar); // অ্যাক্সেসযোগ্য
}

exampleFunction();

console.log(globalVar); // অ্যাক্সেসযোগ্য
console.log(functionVar); // ReferenceError: functionVar ডিফাইন্ড নয়

if (true) {
    // ব্লক স্কোপ
    let blockVar = "আমি একটি ব্লক-স্কোপড ভেরিয়েবল";
    console.log(blockVar); // অ্যাক্সেসযোগ্য
}

console.log(blockVar); // ReferenceError: blockVar ডিফাইন্ড নয়
```

এই উদাহরণে:

- `globalVar` ফাংশনের ভিতরে এবং বাইরে উভয় স্থানেই অ্যাক্সেসযোগ্য।
- `functionVar` শুধুমাত্র `exampleFunction` ফাংশনের ভিতরে অ্যাক্সেসযোগ্য; বাইরে থেকে অ্যাক্সেস করতে গেলে `ReferenceError` হবে।
- `blockVar` শুধুমাত্র `if` ব্লকের ভিতরে অ্যাক্সেসযোগ্য; বাইরে থেকে অ্যাক্সেস করতে গেলে `ReferenceError` হবে।

**স্কোপ বোঝার গুরুত্ব:**

- **নাম সংঘর্ষ এড়ানো:** সঠিক স্কোপ ব্যবস্থাপনা ভেরিয়েবলগুলোর অনিচ্ছাকৃত ওভাররাইটিং প্রতিরোধ করে, বিশেষ করে বড় কোডবেসে।
- **মেমরি ব্যবস্থাপনা:** নির্দিষ্ট স্কোপে সীমাবদ্ধ ভেরিয়েবলগুলো সেই স্কোপ শেষ হলে গারবেজ কালেকশনের জন্য উপযুক্ত হয়, যা মেমরির কার্যকর ব্যবহার 
    নিশ্চিত করে।
- **কোডের পাঠযোগ্যতা এবং রক্ষণাবেক্ষণ:** স্কোপ নিয়ম বোঝার মাধ্যমে কোডে ভেরিয়েবলগুলোর জীবনচক্র এবং ডেটা ফ্লো ট্র্যাক করা সহজ হয়, যা কোডের
     পাঠযোগ্যতা এবং রক্ষণাবেক্ষণযোগ্যতা বাড়ায়।

স্কোপ সম্পর্কে আরও বিস্তারিত জানতে, আপনি [জাভাস্ক্রিপ্টে স্কোপ কি?](https://academy.vivasoftltd.com/what-is-scope-in-javascript/) প্রবন্ধটি 
পড়তে পারেন।



*/

var x = 55;

function test() {
    var x = 45;
    console.log(x);
}
test();


// difference between scope and closure 
/* 
    জাভাস্ক্রিপ্টে **স্কোপ** এবং **ক্লোজার** দুটি গুরুত্বপূর্ণ ধারণা, যা ভেরিয়েবল এবং ফাংশনের মধ্যে সম্পর্ক নির্ধারণে ভিন্ন ভিন্ন ভূমিকা পালন করে।

**স্কোপ:**

স্কোপ নির্ধারণ করে কোন ভেরিয়েবল এবং ফাংশন কোডের কোন অংশে অ্যাক্সেস করা যাবে। জাভাস্ক্রিপ্টে প্রধানত তিন প্রকারের স্কোপ রয়েছে:

1. **গ্লোবাল স্কোপ:** যে ভেরিয়েবলগুলো কোনো ফাংশন বা ব্লকের বাইরে ডিক্লেয়ার করা হয়, সেগুলো গ্লোবাল স্কোপে থাকে এবং কোডের যেকোনো স্থান থেকে 
    অ্যাক্সেস করা যায়।

2. **ফাংশন স্কোপ:** `var` কীওয়ার্ড দিয়ে ফাংশনের ভিতরে ডিক্লেয়ার করা ভেরিয়েবলগুলো শুধুমাত্র সেই ফাংশনের মধ্যেই অ্যাক্সেস করা যায় এবং বাইরে থেকে 
    অ্যাক্সেস করা যায় না।

3. **ব্লক স্কোপ:** ES6 এ `let` এবং `const` কীওয়ার্ডের মাধ্যমে ব্লক স্কোপ পরিচিত হয়। এগুলো ব্লকের (যেমন `{}`) মধ্যে ডিক্লেয়ার করা ভেরিয়েবলগুলোকে
     সেই ব্লকের মধ্যেই সীমাবদ্ধ রাখে।

**ক্লোজার:**

ক্লোজার হলো এমন একটি ফাংশন, যা তার লেক্সিকাল স্কোপের ভেরিয়েবলগুলোর প্রতি রেফারেন্স ধরে রাখে, এমনকি সেই ফাংশনটি তার মূল স্কোপের বাইরে 
    এক্সিকিউট হলেও। অর্থাৎ, ক্লোজার একটি ফাংশনকে তার বাহিরের ফাংশনের স্কোপে থাকা ভেরিয়েবলগুলোতে অ্যাক্সেসের সুযোগ দেয়, যদিও বাহিরের ফাংশনটি ইতিমধ্যে এক্সিকিউশন শেষ করে ফেলেছে।

**স্কোপ এবং ক্লোজার উদাহরণ:**

```javascript
function outerFunction() {
    let outerVariable = 'আমি বাহিরের স্কোপের ভেরিয়েবল';

    function innerFunction() {
        console.log(outerVariable);
    }

    return innerFunction;
}

const closureFunction = outerFunction();
closureFunction(); // আউটপুট: আমি বাহিরের স্কোপের ভেরিয়েবল
```

এই উদাহরণে:

- `outerVariable` ফাংশন স্কোপের মধ্যে `outerFunction` এ ডিক্লেয়ার করা হয়েছে।

- `innerFunction` একটি ক্লোজার, যা `outerVariable` এর প্রতি রেফারেন্স ধরে রাখে, এমনকি `outerFunction` এক্সিকিউশন শেষ করার পরেও।

**মূল পার্থক্য:**

- **স্কোপ** নির্ধারণ করে ভেরিয়েবল এবং ফাংশন কোডের কোন অংশে অ্যাক্সেস করা যাবে।

- **ক্লোজার** ঘটে যখন একটি ফাংশন তার বাহিরের ফাংশনের স্কোপের ভেরিয়েবলগুলোর প্রতি রেফারেন্স ধরে রাখে, এমনকি বাহিরের ফাংশনটি এক্সিকিউশন শেষ 
    করার পরেও।

স্কোপ এবং ক্লোজার সম্পর্কে আরও বিস্তারিত জানতে, আপনি [জাভাস্ক্রিপ্টে ক্লোজার কি?](https://academy.vivasoftltd.com/what-is-closer-in-javascript/) প্রবন্ধটি পড়তে পারেন।


 

*/