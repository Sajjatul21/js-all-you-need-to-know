for (var i = 0; i <= 5; i++) {
    setTimeout(function () {
        console.log(i);
    }, 1000);
}

/* 
এই কোডের আউটপুট `6` দেখানোর কারণ হল ক্লোজার এবং অ্যাসিঙ্ক্রোনাস ফাংশনগুলির কার্যকারিতা। আসুন ধাপে ধাপে দেখি কী ঘটে:

1. `for` লুপটি `i = 0` থেকে `i = 5` পর্যন্ত চলে, এবং প্রতি বার `setTimeout` কল করা হয়।
2. তবে, `setTimeout` একটি অ্যাসিঙ্ক্রোনাস ফাংশন, অর্থাৎ এটি অবিলম্বে এক্সিকিউট হয় না। এটি `console.log(i)` 1000 মিলিসেকেন্ড (1 সেকেন্ড) পর চালানোর জন্য স্কেজিউল করে।
3. যেহেতু `setTimeout` অ্যাসিঙ্ক্রোনাস, লুপটি শেষ হয়ে যাওয়ার আগেই `i` এর মান হয়ে যায় `6` (কারণ লুপের শর্ত ছিল `i <= 5`, এবং প্রতিটি ইটারেশনে `i` বাড়ানো হয়েছে)।
4. সমস্ত `setTimeout` ফাংশন একই `i` ভেরিয়েবলটি রেফারেন্স করে, যার মান লুপ শেষ হওয়ার পর `6` হয়ে গেছে।
5. তাই যখন `console.log(i)` `setTimeout` এর ভিতরে এক্সিকিউট হয়, এটি প্রতিবার `6` প্রিন্ট করে।

### সমাধান:
এটি ঠিক করতে এবং প্রত্যাশিত আউটপুট (0, 1, 2, 3, 4, 5 প্রিন্ট করা) পেতে, আপনি **IIFE (Immediately Invoked Function Expression)** ব্যবহার করতে পারেন অথবা `let` ব্যবহার করতে পারেন, যেটি ব্লক-স্কোপড ভেরিয়েবল তৈরি করে।

#### `let` ব্যবহার করে (ব্লক-স্কোপড ভেরিয়েবল):
```javascript
for (let i = 0; i <= 5; i++) {
    setTimeout(function () {
        console.log(i);
    }, 1000);
}
```

এটি প্রিন্ট করবে:
```
0
1
2
3
4
5
```

এখানে `let` ব্যবহার করলে, লুপের প্রতিটি ইটারেশনে আলাদা স্কোপ তৈরি হয়, ফলে `setTimeout` ফাংশনের ভিতরে `i` এর সঠিক মান ধরে রাখা যায়।

*/

/* 
`let` ব্যবহার করলে ১, ২, ৩, ৪, ৫ আউটপুট আসে কারণ `let` একটি **ব্লক-স্কোপড** ভেরিয়েবল তৈরি করে, অর্থাৎ প্রতিটি লুপের ইটারেশনের জন্য আলাদা আলাদা স্কোপ তৈরি হয়। 

এটি কীভাবে কাজ করে তা বোঝার জন্য নিচে ধাপে ধাপে ব্যাখ্যা করা হলো:

1. যখন `let` ব্যবহার করা হয়, তখন প্রতিটি ইটারেশনে একটি নতুন স্কোপ তৈরি হয়। অর্থাৎ, প্রতিটি লুপের জন্য `i` ভেরিয়েবল আলাদা একটি কপি তৈরি হয়।
2. `setTimeout` যখন কল করা হয়, তখন সেই নির্দিষ্ট ইটারেশনের জন্য `i` এর মান সেই স্কোপে ধারণ করা হয়। 
3. `setTimeout` ফাংশন যখন এক্সিকিউট হয়, তখন এটি তার নিজস্ব স্কোপে থাকা `i` এর মান দেখায়, যা লুপের সেই নির্দিষ্ট ইটারেশনের জন্য ছিল।
4. এর ফলে, প্রতিটি `setTimeout` ফাংশন সঠিক মান (০, ১, ২, ৩, ৪, ৫) প্রিন্ট করে, কারণ প্রতিটি ইটারেশনে আলাদা `i` ভেরিয়েবল থাকে।

যেমন:

```javascript
for (let i = 0; i <= 5; i++) {
    setTimeout(function () {
        console.log(i);  // এখানে i প্রতিটি ইটারেশনের জন্য আলাদা স্কোপে থাকবে
    }, 1000);
}
```

এখানে `let` এর কারণে প্রতিটি ইটারেশনের জন্য আলাদা `i` ভেরিয়েবল তৈরি হচ্ছে, তাই প্রতিটি `setTimeout` ফাংশন সঠিক মান প্রিন্ট করছে (০, ১, ২, ৩, ৪, ৫)।
*/

// IIFI 

for (i = 0; i <= 5; i++) {
    (function (n) {
        setTimeout(function () {
            console.log(n);
        }, 1000 * i);
    }

    )(i);
};
